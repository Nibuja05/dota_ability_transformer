import * as ts from "typescript";
import * as fs from "fs";
const node_modules = require("node_modules-path");
import { KVObject, serialize, deserializeFile, KVValue } from "valve-kv";
import {
	DifferentlyNamedAbilityKVs,
	LinkedSpecialBonusOperationNames,
	SpellImmunityTypesNames,
	SpellDispellableTypesNames,
	AbilityCastGestureSlotValueNames,
	ProtectedProperties,
} from "dota_ability_transformer/transformEnums";

const GENERATED_FILE_NAME = "/generatedAbilities.kv";
const GENERATED_FILE_PATH = "generatedAbilities";
const BASE_NPC_ABILITY_FILE = `
#base "heroes/meepo.kv"

"DOTAAbilities"
{
}`;
const BASE_ABILITY_OBJECT = `
"DOTAAbilities"
{
}`;

// initially set to the default config
let configuration: ConfigurationFile = {
	modularization: ModularizationType.Folder,
	debug: false,
	strict: StrictType.Warn,
	disable: false,
};
const abilityMap: Map<string, Set<string>> = new Map();
const curAbilities: Map<string, Set<AbilityInformation>> = new Map();

/**
 * Is the given number in the string an integer or a float?
 * @param num number string to check
 * @returns true, if its an integer
 */
function isInt(num: string): boolean {
	const parsedNum = parseFloat(num);
	return Number.isInteger(parsedNum);
}

/**
 * Print debug messages
 * @param msg message to print
 */
function debugPrint(msg: string) {
	if (configuration.debug) console.log("> " + msg);
}

/**
 * Get the path to the ability directory inside "scripts/npc"
 * @returns ability path
 */
function getAbilityPath(): string {
	const abilityDir = node_modules() + "/../game/scripts/npc";
	if (!fs.existsSync(abilityDir)) throw Error("NPC script path not found");
	const genPath = abilityDir + "/abilities";
	if (!fs.existsSync(genPath)) fs.mkdirSync(genPath);
	return genPath;
}

/**
 * Get all currently generated abilities.
 * @returns generated abilities object
 */
function getAllGeneratedAbilities(): KVObject | undefined {
	const abilityPath = getAbilityPath();
	const abilityFilePath = abilityPath + GENERATED_FILE_NAME;
	if (!fs.existsSync(abilityFilePath)) {
		debugPrint("Failed to find " + GENERATED_FILE_NAME);
		return;
	}
	return deserializeFile(abilityFilePath);
}

/**
 * Get all currently generated abilities.
 * @returns generated abilities object
 */
function getGeneratedAbilities(path: string): KVObject | undefined {
	const abilityFilePath = getAbilityPathName(path);
	if (!fs.existsSync(abilityFilePath)) {
		debugPrint("Failed to find " + abilityFilePath);
		return;
	}
	return deserializeFile(abilityFilePath);
}

/**
 * Writes the information of this ability object to a file, based on current configuration.
 * @param path orig file path (to determine modularization)
 * @param abilityObject ability object to write
 */
function writeGeneratedAbilities(path: string, abilityObject: KVObject) {
	const abilityStr = serialize({ DOTAAbilities: abilityObject });
	const abilityFilePath = getAbilityPathName(path);
	debugPrint("Write to " + abilityFilePath);
	fs.writeFileSync(abilityFilePath, abilityStr);
	addBase(path);
}

/**
 * Writes the information of this ability object to a file.
 * Never uses modularization.
 * @param abilityObject
 */
function writeAllGeneratedAbilities(abilityObject: KVObject) {
	const abilityStr = serialize({ DOTAAbilities: abilityObject });
	const abilityPath = getAbilityPath() + GENERATED_FILE_NAME;
	debugPrint("Write all abilities");
	fs.writeFileSync(abilityPath, abilityStr);
}

function getModuleName(filePath: string): string {
	switch (configuration.modularization) {
		case ModularizationType.None:
			return "";
		case ModularizationType.File: {
			const match = filePath.match(/(\w+)\.lua/);
			return match ? match[1] : "";
		}
		case ModularizationType.Folder: {
			const match = filePath.match(/(\w+)\/\w+\.lua/);
			return match ? match[1] : "";
		}
	}
}

function getAbilityPathName(path: string): string {
	const abilityPath = getAbilityPath();
	let abilityFilePath: string;
	switch (configuration.modularization) {
		case ModularizationType.None:
			abilityFilePath = abilityPath + GENERATED_FILE_NAME;
			break;
		case ModularizationType.File:
		case ModularizationType.Folder:
			const moduleName = getModuleName(path);
			abilityFilePath = `${abilityPath}/${GENERATED_FILE_PATH}/${moduleName}.kv`;
	}
	return abilityFilePath;
}

function addBase(path: string) {
	debugPrint("Check bases [Add]");
	if (configuration.modularization === ModularizationType.None) return;
	const moduleName = getModuleName(path);
	const curBases = getBases();
	if (curBases.includes(moduleName)) {
		debugPrint("Base " + moduleName + " already included");
		return;
	}
	writeBases([...curBases, moduleName]);
}

function removeBase(path: string) {
	debugPrint("Check bases [Remove]");
	if (configuration.modularization === ModularizationType.None) return;
	const moduleName = getModuleName(path);
	const curBases = getBases();
	if (!curBases.includes(moduleName)) {
		debugPrint("Base " + moduleName + " not included");
		return;
	}
	writeBases(curBases.filter((base) => base !== moduleName));
}

/**
 * Checks whether the generated ability kv is already included in the base abilities file.
 * If not, it includes it.
 */
function checkAbilityBase() {
	const abilityPath = getAbilityPath();
	const baseAbilityFilePath = abilityPath + "/../npc_abilities_custom.txt";
	debugPrint("Check if " + GENERATED_FILE_NAME + " is already included as base");
	if (!fs.existsSync(baseAbilityFilePath)) {
		fs.writeFileSync(baseAbilityFilePath, BASE_NPC_ABILITY_FILE);
	} else {
		const baseAbilityFile = fs.readFileSync(baseAbilityFilePath).toString();
		const regex = /^#base\s+["'](.*)["']/gm;
		let match: RegExpExecArray | null;
		const includedFiles: string[] = [];
		while ((match = regex.exec(baseAbilityFile)) !== null) {
			if (!match) continue;
			includedFiles.push(match[1]);
		}
		if (!includedFiles.includes("abilities/generatedAbilities.kv")) {
			fs.writeFileSync(baseAbilityFilePath, `#base "abilities/generatedAbilities.kv"\n${baseAbilityFile}`);
		}
	}
}

let initialized = false;
/**
 * Check what abilities are currently defined already.
 */
function inititialize() {
	getConfiguration();
	if (configuration.disable === true) return;

	if (initialized === true) return;
	initialized = true;
	console.log("[Ability Transformer] Initialize...");

	checkAbilityBase();

	let origfileContent: KVObject | undefined;
	try {
		origfileContent = getAllGeneratedAbilities();
	} catch {
		debugPrint("Failed to read " + GENERATED_FILE_NAME);
	}
	let fileContent: KVObject = {};
	if (!origfileContent || Object.keys(origfileContent).length === 0) {
		debugPrint(GENERATED_FILE_NAME + " is empty or not found");
		const abilityPath = `${getAbilityPath()}${GENERATED_FILE_NAME}`;
		fs.writeFileSync(abilityPath, BASE_ABILITY_OBJECT);

		if (configuration.modularization !== ModularizationType.None) {
			const abilityBasePath = `${getAbilityPath()}/${GENERATED_FILE_PATH}`;
			if (!fs.existsSync(abilityBasePath)) fs.mkdirSync(abilityBasePath);
		}

		console.log("\x1b[32m%s\x1b[0m", "[Ability Transformer] Initialization complete!\n");
		return;
	} else {
		fileContent = origfileContent.DOTAAbilities as KVObject;
	}
	for (const [key, value] of Object.entries(fileContent)) {
		const fileName = (value as KVObject)["ScriptFile"] as string | undefined;
		if (!fileName) continue;
		let abilitySet = abilityMap.get(fileName);
		if (!abilitySet) abilitySet = new Set();
		abilitySet.add(key);
		abilityMap.set(fileName, abilitySet);
	}
	const bases = getBases();

	// Adjust the bases to the current configuration
	switch (configuration.modularization) {
		case ModularizationType.None: {
			debugPrint("Switch to modularization: " + configuration.modularization);
			if (bases.length > 0) {
				writeAllGeneratedAbilities(fileContent);
			}
			const abilityBasePath = `${getAbilityPath()}/${GENERATED_FILE_PATH}`;
			if (fs.existsSync(abilityBasePath)) {
				fs.rmdirSync(abilityBasePath, { recursive: true });
			}
			break;
		}
		case ModularizationType.File:
		case ModularizationType.Folder:
			debugPrint("Switch to modularization: " + configuration.modularization);
			const abilityBasePath = `${getAbilityPath()}/${GENERATED_FILE_PATH}`;
			if (!fs.existsSync(abilityBasePath)) {
				fs.mkdirSync(abilityBasePath);
			} else {
				fs.rmdirSync(abilityBasePath, { recursive: true });
				fs.mkdirSync(abilityBasePath);
			}

			const moduleMap: Map<string, KVObject> = new Map();
			for (const [key, value] of Object.entries(fileContent)) {
				const fileName = (value as KVObject)["ScriptFile"] as string | undefined;
				if (!fileName) continue;
				const moduleName = getModuleName(fileName);
				const curModules = moduleMap.get(moduleName) ?? ({} as KVObject);
				curModules[key] = value;
				moduleMap.set(moduleName, curModules);
			}

			debugPrint("Write new modularized ability files...");
			const newBases: string[] = [];
			moduleMap.forEach((value, key) => {
				newBases.push(key);
				const abilityStr = serialize({ DOTAAbilities: value });
				const abilityPath = abilityBasePath + `/${key}.kv`;
				fs.writeFileSync(abilityPath, abilityStr);
			});

			writeBases(newBases);

			break;
	}

	console.log("\x1b[32m%s\x1b[0m", "[Ability Transformer] Initialization complete!\n");
}

/**
 * Read the current configuration file or create a new one if none exists.
 */
function getConfiguration() {
	const filePath = ".abilityTransformerrc.json";
	if (!fs.existsSync(filePath)) {
		return;
	} else {
		const content = fs.readFileSync(filePath, "utf-8");
		const newConfig: ConfigurationFile = JSON.parse(content);
		for (const [key, val] of Object.entries(newConfig)) {
			(configuration[key as keyof ConfigurationFile] as any) = val;
		}
	}
	debugPrint("Get current configuration");
}

/**
 * Get all current bases for the modularization.
 * @returns
 */
function getBases(): string[] {
	debugPrint("Get current bases");
	const abilityPath = getAbilityPath();
	const abilityFilePath = abilityPath + GENERATED_FILE_NAME;
	if (!fs.existsSync(abilityFilePath)) return [];
	const content = fs.readFileSync(abilityFilePath, "utf-8");
	const regex = /^#base\s+\".*?\/(.*).kv\"/gm;
	let match: RegExpExecArray | null;
	const bases: string[] = [];
	while ((match = regex.exec(content)) !== null) {
		bases.push(match[1]);
	}
	return bases;
}

function writeBases(bases: string[]) {
	let basesString = "";
	for (const base of bases) {
		basesString += `#base "${GENERATED_FILE_PATH}/${base}.kv"\n`;
	}
	basesString += BASE_ABILITY_OBJECT;
	const abilityPath = `${getAbilityPath()}${GENERATED_FILE_NAME}`;
	debugPrint("Refresh bases");
	fs.writeFileSync(abilityPath, basesString);
}

/**
 * Create the ability text from the given information and update the ability kvs.
 * @param name name of the ability
 * @param scriptFile scripts file path
 * @param properties base properties of the the ability
 * @param specials ability special values
 */
function writeAbility(ability: AbilityInformation) {
	debugPrint("Prepare write of ability");
	const formattedSpecials: { [name: string]: { [name: string]: string } } = {};
	for (let i = 0; i < ability.specials.length; i++) {
		const special = ability.specials[i];
		const index = (i + 1).toString().padStart(2, "0");
		const formattedValue = Array.isArray(special.value) ? special.value.join(" ") : special.value.toString();
		const otherFields: { [name: string]: string } = {};
		for (const [name, val] of Object.entries(special)) {
			if (name === "name" || name === "type" || name === "value") continue;
			otherFields[name] = val;
		}
		formattedSpecials[index] = {
			var_type: special.type,
			[special.name]: formattedValue,
			...otherFields,
		};
	}
	const replacedProperties: { [name: string]: string } = {};
	for (const [name, val] of Object.entries(ability.properties)) {
		const replacedName = DifferentlyNamedAbilityKVs[name as keyof typeof DifferentlyNamedAbilityKVs] ?? name;
		replacedProperties[replacedName] = val;
	}
	const kvAbility: KVObject = {
		BaseClass: "ability_lua",
		ScriptFile: ability.scriptFile,
		...replacedProperties,
		...ability.customProperties,
	};
	if (ability.specials.length > 0) {
		kvAbility.AbilitySpecial = {
			...formattedSpecials,
		};
	}
	const origfileContent = getGeneratedAbilities(ability.scriptFile);
	let fileContent: KVObject = {};
	if (origfileContent) {
		fileContent = origfileContent.DOTAAbilities as KVObject;
	}
	fileContent[ability.name] = kvAbility;
	writeGeneratedAbilities(ability.scriptFile, fileContent);
}

/**
 * Remove an ability from the KV ability file.
 * @param abilityName name of the ability
 */
function removeAbility(path: string, abilityName: string, remBase: boolean) {
	debugPrint("Remove ability: " + abilityName);
	const origfileContent = getGeneratedAbilities(path);
	const abilityFilePath = getAbilityPathName(path);
	let fileContent: KVObject = {};
	if (origfileContent) {
		fileContent = origfileContent.DOTAAbilities as KVObject;
	}
	delete fileContent[abilityName];
	if (remBase) removeBase(path);
	if (Object.keys(fileContent).length === 0 && configuration.modularization !== ModularizationType.None) {
		fs.unlinkSync(abilityFilePath);
		return;
	}
	const abilityStr = serialize({ DOTAAbilities: fileContent });
	fs.writeFileSync(abilityFilePath, abilityStr);
}

/**
 * Get the file path of an ability based on the current node.
 * @param node current node
 * @returns current node file path (relative from "vscripts")
 */
function getCleanedFilePath(node: ts.Node): string {
	const absPath = ts.getOriginalNode(node).getSourceFile().fileName;
	const match = absPath.match(/.*vscripts[\/\\](.*)\.ts/);
	if (!match) throw Error("Invalid File Path: " + absPath);
	return match[1] + ".lua";
}

/**
 * Get the name and arguments of a decorator node.
 * @param decorator decorator node to check
 * @returns name and arguments (if any)
 */
function getDecoratorInfo(decorator: ts.Decorator): { name: string; args: ts.NodeArray<ts.Expression> } | undefined {
	const exp = decorator.expression;
	if (ts.isCallExpression(exp)) {
		const args = exp.arguments;
		const name = exp.expression.getText();
		return { name, args };
	}
	return;
}

/**
 * Get the name of a node.
 * @param node node to check
 * @returns name
 */
function getNodeName<T extends { name: ts.Node }>(node: T): string {
	const nameNode = node.name;
	if (!ts.isIdentifier(nameNode)) return "";
	return nameNode.escapedText ?? "";
}

/**
 * Get the expression name of a node.
 * @param node node to check
 * @returns expression name
 */
function getNodeExpressionName<T extends { expression: ts.Node }>(node: T): string {
	const nameNode = node.expression;
	if (!ts.isIdentifier(nameNode)) return "";
	return nameNode.escapedText ?? "";
}

/**
 * Return the content of an object node as an object.
 * @param node object node
 * @returns object
 */
function getObjectNodeEntries(node: ts.ObjectLiteralExpression): {
	[name: string]: string | string[];
} {
	let entries: { [name: string]: any } = {};
	for (const property of node.properties) {
		if (!ts.isPropertyAssignment(property)) continue;
		const name = getNodeName(property);
		let value: string | string[] = "";
		if (ts.isNumericLiteral(property.initializer) || ts.isStringLiteral(property.initializer)) {
			value = property.initializer.text;
		} else if (ts.isArrayLiteralExpression(property.initializer)) {
			value = [];
			for (const elem of property.initializer.elements) {
				if (ts.isNumericLiteral(elem) || ts.isStringLiteral(elem)) {
					(value as string[]).push(elem.text);
				} else if (ts.isIdentifier(elem)) {
					(value as string[]).push(elem.escapedText.toString());
				}
			}
		} else if (ts.isIdentifier(property.initializer)) {
			value = property.initializer.escapedText.toString();
		} else if (property.initializer.kind === ts.SyntaxKind.TrueKeyword) {
			value = "1";
		} else if (property.initializer.kind === ts.SyntaxKind.FalseKeyword) {
			value = "0";
		} else if (ts.isPropertyAccessExpression(property.initializer)) {
			const name = getNodeName(property.initializer);
			const expName = getNodeExpressionName(property.initializer);
			switch (expName) {
				case "LinkedSpecialBonusOperation":
					value = LinkedSpecialBonusOperationNames[name as keyof typeof LinkedSpecialBonusOperation];
					break;
				case "SpellImmunityTypes":
					value = SpellImmunityTypesNames[name as keyof typeof SpellImmunityTypes];
					break;
				case "SpellDispellableTypes":
					value = SpellDispellableTypesNames[name as keyof typeof SpellDispellableTypes];
					break;
				case "AbilityCastGestureSlotValue":
					value = AbilityCastGestureSlotValueNames[name as keyof typeof AbilityCastGestureSlotValue];
					break;
			}
		}
		entries[name] = value;
	}
	return entries;
}

/**
 * Get the special values of an ability.
 * @param node ability special values declaration node
 * @returns ability special values
 */
function getSpecialValues(node: ts.PropertyDeclaration): FinalAbilitySpecialValue[] {
	const initializer = node.initializer;
	if (!initializer) return [];
	if (!ts.isObjectLiteralExpression(initializer)) return [];
	const specials: FinalAbilitySpecialValue[] = [];
	for (const property of initializer.properties) {
		if (!ts.isPropertyAssignment(property)) continue;
		const name = getNodeName(property);
		if (ts.isNumericLiteral(property.initializer) || ts.isStringLiteral(property.initializer)) {
			const value = property.initializer.text;
			specials.push({
				type: isInt(value) ? AbilitySpecialValueType.INTEGER : AbilitySpecialValueType.FLOAT,
				name,
				value,
			});
		} else if (ts.isArrayLiteralExpression(property.initializer)) {
			const values: string[] = [];
			let type = AbilitySpecialValueType.INTEGER;
			for (const elem of property.initializer.elements) {
				if (ts.isNumericLiteral(elem) || ts.isStringLiteral(elem)) {
					values.push(elem.text);
					if (!isInt(elem.text)) type = AbilitySpecialValueType.FLOAT;
				}
			}
			specials.push({
				type,
				name,
				value: values,
			});
		} else if (ts.isObjectLiteralExpression(property.initializer)) {
			const entries = getObjectNodeEntries(property.initializer);
			let value: string | string[] = "";
			let type = AbilitySpecialValueType.INTEGER;
			if (entries["value"]) {
				if (Array.isArray(entries["value"])) {
					value = [];
					for (const elem of entries["value"]) {
						value.push(elem);
						if (!isInt(elem)) type = AbilitySpecialValueType.FLOAT;
					}
				} else {
					value = entries["value"];
					if (!isInt(entries["value"])) type = AbilitySpecialValueType.FLOAT;
				}
			}
			const otherEntries: { [name: string]: string } = {};
			for (const [name, val] of Object.entries(entries)) {
				if (name === "value") continue;
				otherEntries[name] = val as string;
			}
			specials.push({
				type,
				name,
				value,
				...otherEntries,
			});
		}
	}
	return specials;
}

/**
 * Get the base properties of an ability.
 * @param node base property declaration node
 * @returns base properties
 */
function getBaseProperties(node: ts.PropertyDeclaration): FinalAbilityBaseProperties {
	const initializer = node.initializer;
	if (!initializer) return {};
	if (!ts.isObjectLiteralExpression(initializer)) return {};
	const properties: FinalAbilityBaseProperties = {};
	for (const [name, val] of Object.entries(getObjectNodeEntries(initializer))) {
		properties[name as keyof AbilityBaseProperties] = Array.isArray(val) ? val.join(" | ") : val;
	}
	return properties;
}

function getCustomProperties(node: ts.PropertyDeclaration): AbilityCustomProperties {
	const initializer = node.initializer;
	if (!initializer) return {};
	if (!ts.isObjectLiteralExpression(initializer)) return {};
	const properties: { [key: string]: string } = {};
	for (const [name, val] of Object.entries(getObjectNodeEntries(initializer))) {
		properties[name] = Array.isArray(val) ? val.join(" ") : val;
	}
	return properties;
}

/**
 * Should this ability be skipped?
 * Only do so if its true.
 * @param node skip declaration node
 * @returns true if ability should be skipped
 */
function getSkipValue(node: ts.PropertyDeclaration): boolean {
	const initializer = node.initializer;
	if (!initializer) return false;
	if (initializer.kind === ts.SyntaxKind.TrueKeyword) return true;
	return false;
}

/**
 * Check if a node is an ability class and write it.
 * @param node node to check
 */
function checkNode(node: ts.Node) {
	if (ts.isClassDeclaration(node)) {
		const decorators = node.decorators;
		if (!decorators) return;
		for (const deco of decorators) {
			const decoInfo = getDecoratorInfo(deco);
			if (!decoInfo) return;
			if (decoInfo.name !== "registerAbility") return;
		}
		if (!node.name) return;
		const name = node.name.escapedText.toString();
		let values: FinalAbilitySpecialValue[] | undefined;
		let props: FinalAbilityBaseProperties | undefined;
		let customProps: AbilityCustomProperties | undefined;
		let skip = false;
		node.forEachChild((child) => {
			if (ts.isPropertyDeclaration(child)) {
				const name = getNodeName(child);
				if (name === ProtectedProperties.SpecialValues) {
					values = getSpecialValues(child);
				}
				if (name === ProtectedProperties.BaseProperties) {
					props = getBaseProperties(child);
				}
				if (name === ProtectedProperties.SkipAbility) {
					skip = getSkipValue(child);
				}
				if (name === ProtectedProperties.CustomProperties) {
					customProps = getCustomProperties(child);
				}
			}
		});
		const filePath = getCleanedFilePath(node);
		if (!skip) {
			const abilityList = curAbilities.get(filePath);
			if (!abilityList) return;

			if (!props) {
				if (configuration.strict === StrictType.Warn) {
					console.log("\x1b[93m%s\x1b[0m", `[Ability Transformer] No properties for '${name}'. Skipping.`);
				}
				if (configuration.strict === StrictType.Error) {
					throw new Error(`\x1b[91m[Ability Transformer] No properties for '${name}'. Aborting.\x1b[0m`);
				}
				return;
			}

			abilityList.add({
				name,
				scriptFile: filePath,
				properties: props ?? {},
				specials: values ?? [],
				customProperties: customProps ?? {},
			});
		} else {
			debugPrint("Skipped ability creation for: " + name);
		}
	}
}

function hasAbility(abilityName: string, abilities: Set<AbilityInformation>): boolean {
	let found = false;
	abilities.forEach((ability) => {
		if (ability.name === abilityName) {
			found = true;
			return;
		}
	});
	return found;
}

function getAbilityFileCountByFolder(path: string) {
	const curModuleName = getModuleName(path);
	let count = 0;
	for (const [filePath, names] of abilityMap) {
		if (filePath === path) continue;
		const namesSet = names as Set<string>;
		if (namesSet.size === 0) continue;
		const moduleName = getModuleName(filePath);
		if (moduleName === curModuleName) count++;
	}
	return count;
}

/**
 * Check if this node should be deleted.
 * @param node node to check
 * @returns node. undefined if it has to be removed
 */
const removeNode: ts.Visitor = (node) => {
	if (ts.isPropertyDeclaration(node)) {
		const name = getNodeName(node);
		if (name in ProtectedProperties) return;
	}
	return node;
};

/**
 * Creates the transformer.
 */
const createDotaTransformer = (): ts.TransformerFactory<ts.SourceFile> => (context) => {
	const visit: ts.Visitor = (node) => {
		if (configuration.disable === true) return node;

		checkNode(node);
		if (!removeNode(node)) return;
		return ts.visitEachChild(node, visit, context);
	};
	return (file) => {
		const fileName = getCleanedFilePath(file);
		let fileAbilities = abilityMap.get(fileName) ?? new Set();
		curAbilities.set(fileName, new Set());

		const res = ts.visitNode(file, visit);

		const curFileAbilities = curAbilities.get(getCleanedFilePath(file))!;
		fileAbilities.forEach((abilityName) => {
			if (!hasAbility(abilityName, curFileAbilities)) {
				let remBase = false;
				if (configuration.modularization !== ModularizationType.None) {
					remBase = curFileAbilities.size === 0;
				}
				if (configuration.modularization === ModularizationType.Folder && remBase) {
					const count = getAbilityFileCountByFolder(fileName);
					remBase = count === 0;
				}
				removeAbility(fileName, abilityName, remBase);
			}
		});
		fileAbilities = new Set();
		curFileAbilities.forEach((ability) => {
			writeAbility(ability);
			fileAbilities.add(ability.name);
		});
		abilityMap.set(fileName, fileAbilities);

		return res;
	};
};

inititialize();

export default createDotaTransformer;
